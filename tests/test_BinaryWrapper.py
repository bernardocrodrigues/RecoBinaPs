from io import StringIO

from lib.BinapsWrapper import parse_binaps_patterns

# Binaps output is written to a .patterns file with its contents as follows
BINAPS_PATTERNS_STRING = """
[129 130 131 132 133 134 264 265 266 267 268 269 270 271 272]
[  5   6   7   8   9  84  85 143 144 145 168 169 170 171 213 214 261 262
 263]
[136 137 138 139 141 142 163 164 165 166 167 172 173 174 175 176 261 262
 263]
[239 240 241 242 243 244 245]
[ 31  32  33  80  81  82  83 151 152 189 190 228 229 285 286 287]
[ 16  17  18  19  20 146 147 148 149 150 213 214 276 277 278 279 280 281
 282 283 284]
[55 56 57 58 59 60 61 62 63 64]
[ 65  66  67  68  69  70  71  72 199 200 201 202 203 204 205 206 207 208]
[ 99 100 101 102 103 104 151 152 255 256 257 258 259 260]
[  0   1   2   3   4  28  29  30  86  87  88  89 209 210 211 212 225 226
 227 228 229]
[105 106 107 108 109 110]
[ 34  35  36  37  38  39  40  41  42  43 181 182 183 184 185 186 187 188]
[ 84  85 151 152 177 178 179 180 189 190 273 274 275]
[191 192 193 194 195 196 197 198 246 247 248 249 250 251 252 253 254]
[215 216 217 218 219 220 221 222 223 224]
[ 73  74  75  76  77  78  79 111 112 113 114 115 116 117 118]
[153 154 155 156 157 158 159 160 161 162 230 231 232 233 234 235 236 237
 238]
[ 10  11  12  13  14  15  44  45  46  47  48  49 135 136 137 138 139 140
 141 142]
[21 22 23 24 25 26 27 90 91 92 93 94 95 96 97 98]
[ 50  51  52  53  54 119 120 121 122 123 124 125 126 127 128]
"""

BINAPS_PATTERNS = [
    [129, 130, 131, 132, 133, 134, 264, 265, 266, 267, 268, 269, 270, 271, 272],
    [5, 6, 7, 8, 9, 84, 85, 143, 144, 145, 168, 169, 170, 171, 213, 214, 261, 262, 263],
    [136, 137, 138, 139, 141, 142, 163, 164, 165, 166, 167, 172, 173, 174, 175, 176, 261, 262, 263],
    [239, 240, 241, 242, 243, 244, 245],
    [31, 32, 33, 80, 81, 82, 83, 151, 152, 189, 190, 228, 229, 285, 286, 287],
    [16, 17, 18, 19, 20, 146, 147, 148, 149, 150, 213, 214, 276, 277, 278, 279, 280, 281, 282, 283, 284],
    [55, 56, 57, 58, 59, 60, 61, 62, 63, 64],
    [65, 66, 67, 68, 69, 70, 71, 72, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208],
    [99, 100, 101, 102, 103, 104, 151, 152, 255, 256, 257, 258, 259, 260],
    [0, 1, 2, 3, 4, 28, 29, 30, 86, 87, 88, 89, 209, 210, 211, 212, 225, 226, 227, 228, 229],
    [105, 106, 107, 108, 109, 110],
    [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 181, 182, 183, 184, 185, 186, 187, 188],
    [84, 85, 151, 152, 177, 178, 179, 180, 189, 190, 273, 274, 275],
    [191, 192, 193, 194, 195, 196, 197, 198, 246, 247, 248, 249, 250, 251, 252, 253, 254],
    [215, 216, 217, 218, 219, 220, 221, 222, 223, 224],
    [73, 74, 75, 76, 77, 78, 79, 111, 112, 113, 114, 115, 116, 117, 118],
    [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 230, 231, 232, 233, 234, 235, 236, 237, 238],
    [10, 11, 12, 13, 14, 15, 44, 45, 46, 47, 48, 49, 135, 136, 137, 138, 139, 140, 141, 142],
    [21, 22, 23, 24, 25, 26, 27, 90, 91, 92, 93, 94, 95, 96, 97, 98],
    [50, 51, 52, 53, 54, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128],
]


def test_parse_binaps_patterns():
    with StringIO(BINAPS_PATTERNS_STRING) as file_object:
        # Call the function under test
        patterns = parse_binaps_patterns(file_object)

        # Iterate through the parsed patterns and expected patterns
        for parsed_pattern, expected_pattern in zip(patterns, BINAPS_PATTERNS):
            # Assert the parsed pattern matches the expected pattern
            assert parsed_pattern == expected_pattern
