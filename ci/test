#!/usr/bin/bash

# This helper script is used to run this repository's tests. It makes sure the tests are run
# inside the docker container where the environment is set up. It also provides some options
# to run specific tests or the full test suite.

# Exit immediately if a command exits with a non-zero status
set -e

# Define default values for options
COVERAGE=false
XML=false
HTML=false
NOTEBOOKS=false
RUN_TESTS=false
SPECIFIC_TESTS=""
PROFILE=false

function print_help {
    echo "Usage: $0 [-c [-x][-b]] | [-t] | [[-p] -s specific_tests]"
    echo "Options:"
    echo "  -c: Run the test suite and generate coverage report"
    echo "  -x: Generate coverage report in xml format"
    echo "  -m: Generate coverage report in html format"
    echo "  -b: Include notebooks in tests and the coverage report"
    echo "  -t: Run tests unit tests"
    echo "  -s: Run specific tests. Use the tests' names as they appear in the pytest implementation"
    echo "  -p: Run specific tests while profiling."
    echo "  -h: Print this help message"
}

while getopts "cxmbtps:" opt; do
    case $opt in
    c)
        COVERAGE=true
        ;;
    x)
        XML=true
        ;;
    m)
        HTML=true
        ;;
    b)
        NOTEBOOKS=true
        ;;
    t)
        RUN_TESTS=true
        ;;
    p)
        PROFILE=true
        ;;
    s)
        SPECIFIC_TESTS="$OPTARG"
        ;;
    \?)
        print_help
        exit 1
        ;;
    esac
done

# Check if no options are provided or if -h is provided
if [[ $OPTIND -eq 1 || "$1" == "-h" ]]; then
    print_help
    exit 0
fi

# Check if either -c, -t, or -s is provided
if ! $COVERAGE && ! $RUN_TESTS && [ -z "$SPECIFIC_TESTS" ]; then
    echo "No valid options provided"
    print_help
    exit 1
fi

# Shift the options and arguments so that $1, $2, etc. contain the non-option arguments
shift $((OPTIND - 1))

# Get the directory of this script
THIS_SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
cd "$THIS_SCRIPT_DIR/../environment"

if $COVERAGE; then

    omits="/usr/local/*,/usr/lib/*,tests/*,*/binaps/original/*"

    if $NOTEBOOKS; then
        notebook_args="--ignore=tmp --nbmake"
    fi

    docker compose run --rm --entrypoint="python3" notebook-cuda -m coverage run --source=. -m pytest --durations=0 -vs $notebook_args

    if $HTML; then
        docker compose run --rm --entrypoint="python3" notebook-cuda -m coverage html --omit=$omits
    else
        docker compose run --rm --entrypoint="python3" notebook-cuda -m coverage report --omit=$omits -m
    fi

    if $XML; then
        docker compose run --rm --entrypoint="python3" notebook-cuda -m coverage xml --omit=$omits
    fi
    exit 0
fi

if $RUN_TESTS; then
    # Run tests if -t flag is set
    docker compose run --rm --entrypoint="python3" notebook-cuda -m pytest --durations=0 -vs
    exit 0
fi

if [ -n "$SPECIFIC_TESTS" ]; then
    # Run specific tests if -s flag is set
    if $PROFILE; then
        # Run specific tests while profiling if -p flag is set
        docker compose run --rm --entrypoint="python3" notebook-cuda -m cProfile -o profile -m pytest --durations=0 -vs -k "$SPECIFIC_TESTS"
        # Use snakeviz to visualize the profiling results
    else
        docker compose run --rm --entrypoint="python3" notebook-cuda -m pytest --durations=0 -vs -k "$SPECIFIC_TESTS"
    fi
    exit 0
fi


cd -
